<!-- Copyright (c) Wiesław Šoltés. All rights reserved. -->
<!-- Licensed under the MIT license. See LICENSE file in the project root for full license information. -->
<Window x:Class="Logic.WPF.Views.MainView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:local="clr-namespace:Logic.WPF"
        xmlns:native="clr-namespace:Logic.Native"
        Title="{Binding FileName, StringFormat={}{0} - Logic, FallbackValue=Logic, TargetNullValue=Logic}" 
        Height="715" Width="1060"
        Background="WhiteSmoke"
        WindowStartupLocation="CenterScreen" WindowState="Maximized"
        SnapsToDevicePixels="True" UseLayoutRounding="False"
        TextOptions.TextFormattingMode="Display" 
        TextOptions.TextHintingMode="Auto" 
        TextOptions.TextRenderingMode="Auto">
    <Window.InputBindings>
        <KeyBinding Command="{Binding FileNewCommand}" Gesture="Ctrl+N"/>
        <KeyBinding Command="{Binding FileOpenCommand}" Gesture="Ctrl+O"/>
        <KeyBinding Command="{Binding FileSaveCommand}" Gesture="Ctrl+S"/>
        <KeyBinding Command="{Binding FileSaveAsCommand}" Gesture=""/>
        <KeyBinding Command="{Binding FileSaveAsPDFCommand}" Gesture="Ctrl+E"/>
        <KeyBinding Command="{Binding FileExitCommand}" Gesture="Alt+F4"/>
        <KeyBinding Command="{Binding EditUndoCommand}" Gesture="Ctrl+Z"/>
        <KeyBinding Command="{Binding EditRedoCommand}" Gesture="Ctrl+Y"/>
        <KeyBinding Command="{Binding EditCutCommand}" Gesture="Ctrl+X"/>
        <KeyBinding Command="{Binding EditCopyCommand}" Gesture="Ctrl+C"/>
        <KeyBinding Command="{Binding EditPasteCommand}" Gesture="Ctrl+V"/>
        <KeyBinding Command="{Binding EditDeleteCommand}" Gesture="Del"/>
        <KeyBinding Command="{Binding EditSelectAllCommand}" Gesture="Ctrl+A"/>
        <KeyBinding Command="{Binding EditAlignLeftBottomCommand}" Gesture="Ctrl+1"/>
        <KeyBinding Command="{Binding EditAlignBottomCommand}" Gesture="Ctrl+2"/>
        <KeyBinding Command="{Binding EditAlignRightBottomCommand}" Gesture="Ctrl+3"/>
        <KeyBinding Command="{Binding EditAlignLeftCommand}" Gesture="Ctrl+4"/>
        <KeyBinding Command="{Binding EditAlignCenterCenterCommand}" Gesture="Ctrl+5"/>
        <KeyBinding Command="{Binding EditAlignRightCommand}" Gesture="Ctrl+6"/>
        <KeyBinding Command="{Binding EditAlignLeftTopCommand}" Gesture="Ctrl+7"/>
        <KeyBinding Command="{Binding EditAlignTopCommand}" Gesture="Ctrl+8"/>
        <KeyBinding Command="{Binding EditAlignRightTopCommand}" Gesture="Ctrl+9"/>
        <KeyBinding Command="{Binding EditIncreaseTextSizeCommand}" Gesture="Ctrl+Plus"/>
        <KeyBinding Command="{Binding EditDecreaseTextSizeCommand}" Gesture="Ctrl+Minus"/>
        <KeyBinding Command="{Binding EditToggleFillCommand}" Key="F"/>
        <KeyBinding Command="{Binding EditToggleSnapCommand}" Key="G"/>
        <KeyBinding Command="{Binding EditToggleInvertStartCommand}" Key="OemOpenBrackets"/>
        <KeyBinding Command="{Binding EditToggleInvertEndCommand}" Key="OemCloseBrackets"/>
        <KeyBinding Command="{Binding EditToggleShortenWireCommand}" Key="H"/>
        <KeyBinding Command="{Binding EditCancelCommand}" Key="Esc"/>
        <KeyBinding Command="{Binding ToolNoneCommand}" Key="N"/>
        <KeyBinding Command="{Binding ToolSelectionCommand}" Key="S"/>
        <KeyBinding Command="{Binding ToolWireCommand}" Key="W"/>
        <KeyBinding Command="{Binding ToolPinCommand}" Key="P"/>
        <KeyBinding Command="{Binding ToolLineCommand}" Key="L"/>
        <KeyBinding Command="{Binding ToolEllipseCommand}" Key="E"/>
        <KeyBinding Command="{Binding ToolRectangleCommand}" Key="R"/>
        <KeyBinding Command="{Binding ToolTextCommand}" Key="T"/>
        <KeyBinding Command="{Binding ToolImageCommand}" Key="I"/>
        <KeyBinding Command="{Binding BlockImportCommand}" Gesture="Ctrl+Shift+B"/>
        <KeyBinding Command="{Binding BlockImportCodeCommand}" Gesture="Shift+Alt+B"/>
        <KeyBinding Command="{Binding BlockExportCommand}" Key="B"/>
        <KeyBinding Command="{Binding BlockExportAsCodeCommand}" Gesture="Ctrl+B"/>
        <KeyBinding Command="{Binding TemplateImportCommand}" Gesture="Ctrl+Shift+T"/>
        <KeyBinding Command="{Binding TemplateImportCodeCommand}" Gesture="Shift+Alt+T"/>
        <KeyBinding Command="{Binding TemplateExportCommand}" Gesture="Ctrl+T"/>
        <KeyBinding Command="{Binding SimulationStartCommand}" Gesture="F5"/>
        <KeyBinding Command="{Binding SimulationStopCommand}" Gesture="F6"/>
        <KeyBinding Command="{Binding SimulationRestartCommand}" Gesture="F7"/>
        <KeyBinding Command="{Binding SimulationPauseCommand}" Gesture="F8"/>
        <KeyBinding Command="{Binding SimulationTickCommand}" Gesture="F9"/>
        <KeyBinding Command="{Binding SimulationCreateGraphCommand}" Gesture=""/>
        <KeyBinding Command="{Binding SimulationOptionsCommand}" Gesture=""/>
    </Window.InputBindings>
    <Window.Resources>
        <ControlTemplate x:Key="PageControlTemplateKey">
            <Grid x:Name="layout"
                  Width="{Binding Path=Page.Template.Width}"
                  Height="{Binding Path=Page.Template.Height}" 
                  FocusVisualStyle="{x:Null}"
                  Focusable="False"
                  SnapsToDevicePixels="True"
                  UseLayoutRounding="False"
                  TextOptions.TextFormattingMode="Display" 
                  TextOptions.TextHintingMode="Auto" 
                  TextOptions.TextRenderingMode="Auto"
                  VerticalAlignment="Stretch" 
                  HorizontalAlignment="Stretch"
                  ClipToBounds="False">
                <native:NativeView x:Name="gridView" 
                                   DataContext="{Binding Path=GridView}"
                                   Background="Transparent" 
                                   FocusVisualStyle="{x:Null}"
                                   IsHitTestVisible="False"
                                   Focusable="False"
                                   ClipToBounds="False"
                                   VerticalAlignment="Center" HorizontalAlignment="Center"
                                   Width="{Binding ElementName=layout, Path=Width}"
                                   Height="{Binding ElementName=layout, Path=Height}"/>
                <native:NativeView x:Name="tableView" 
                                   DataContext="{Binding Path=TableView}"
                                   Background="Transparent" 
                                   FocusVisualStyle="{x:Null}"
                                   IsHitTestVisible="False"
                                   Focusable="False"
                                   VerticalAlignment="Center" HorizontalAlignment="Center"
                                   Width="{Binding ElementName=layout, Path=Width}"
                                   Height="{Binding ElementName=layout, Path=Height}"/>
                <native:NativeView x:Name="frameView" 
                                   DataContext="{Binding Path=FrameView}"
                                   Background="Transparent" 
                                   FocusVisualStyle="{x:Null}"
                                   IsHitTestVisible="False"
                                   Focusable="False"
                                   VerticalAlignment="Center" HorizontalAlignment="Center"
                                   Width="{Binding ElementName=layout, Path=Width}"
                                   Height="{Binding ElementName=layout, Path=Height}"/>
                <native:NativeLayer x:Name="shapeLayer" 
                                    DataContext="{Binding Path=ShapeLayer}"
                                    Background="Transparent" 
                                    FocusVisualStyle="{x:Null}"
                                    IsHitTestVisible="False"
                                    Focusable="False"
                                    VerticalAlignment="Center" HorizontalAlignment="Center"
                                    Width="{Binding ElementName=layout, Path=Width}"
                                    Height="{Binding ElementName=layout, Path=Height}"/>
                <native:NativeLayer x:Name="blockLayer" 
                                    DataContext="{Binding Path=BlockLayer}"
                                    Background="Transparent" 
                                    FocusVisualStyle="{x:Null}"
                                    IsHitTestVisible="False"
                                    Focusable="False"
                                    VerticalAlignment="Center" HorizontalAlignment="Center"
                                    Width="{Binding ElementName=layout, Path=Width}"
                                    Height="{Binding ElementName=layout, Path=Height}"/>
                <native:NativeLayer x:Name="wireLayer" 
                                    DataContext="{Binding Path=WireLayer}"
                                    Background="Transparent" 
                                    FocusVisualStyle="{x:Null}"
                                    IsHitTestVisible="False"
                                    Focusable="False"
                                    VerticalAlignment="Center" HorizontalAlignment="Center"
                                    Width="{Binding ElementName=layout, Path=Width}"
                                    Height="{Binding ElementName=layout, Path=Height}"/>
                <native:NativeLayer x:Name="pinLayer" 
                                    DataContext="{Binding Path=PinLayer}"
                                    Background="Transparent" 
                                    FocusVisualStyle="{x:Null}"
                                    IsHitTestVisible="False"
                                    Focusable="False"
                                    VerticalAlignment="Center" HorizontalAlignment="Center"
                                    Width="{Binding ElementName=layout, Path=Width}"
                                    Height="{Binding ElementName=layout, Path=Height}"/>
                <native:NativeLayer x:Name="editorLayer" 
                                    DataContext="{Binding Path=EditorLayer}"
                                    Background="Transparent" 
                                    FocusVisualStyle="{x:Null}"
                                    IsHitTestVisible="True"
                                    Focusable="True"
                                    VerticalAlignment="Center" HorizontalAlignment="Center"
                                    Width="{Binding ElementName=layout, Path=Width}"
                                    Height="{Binding ElementName=layout, Path=Height}"/>
                <native:NativeLayer x:Name="overlayLayer" 
                                    DataContext="{Binding Path=OverlayLayer}"
                                    Background="{x:Null}" 
                                    FocusVisualStyle="{x:Null}"
                                    IsHitTestVisible="False"
                                    Focusable="False"
                                    VerticalAlignment="Center" HorizontalAlignment="Center"
                                    Width="{Binding ElementName=layout, Path=Width}"
                                    Height="{Binding ElementName=layout, Path=Height}"/>
            </Grid>
        </ControlTemplate>
        <ControlTemplate x:Key="PropertiesControlTemplateKey">
            <ItemsControl VerticalContentAlignment="Stretch" VerticalAlignment="Stretch" ItemsSource="{Binding Database, UpdateSourceTrigger=PropertyChanged}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Grid Height="Auto" VerticalAlignment="Top">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="70"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" HorizontalAlignment="Right" VerticalAlignment="Center" Text="{Binding Key}"/>
                            <TextBox Grid.Column="1" Grid.Row="0" VerticalAlignment="Center" Margin="4,2,2,2" Padding="2" Text="{Binding Value.Data, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        </Grid>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ControlTemplate>
        <ControlTemplate x:Key="BlockContextMenuControlTemplateKey">
            <Border BorderThickness="1" BorderBrush="Black" Background="White" Padding="20">
                <Grid Width="300" Height="Auto" VerticalAlignment="Top">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <TextBlock Grid.Column="0" Grid.Row="0" HorizontalAlignment="Right" VerticalAlignment="Center" Text="Name"/>
                    <TextBox Grid.Column="1" Grid.Row="0" VerticalAlignment="Center" Margin="4,2,2,2" Padding="2" Text="{Binding Path=Selected.Name}" IsReadOnly="True"/>
                    <Control DataContext="{Binding Selected}" Grid.Column="1" Grid.ColumnSpan="1" Grid.Row="1" Template="{DynamicResource PropertiesControlTemplateKey}"/>
                </Grid>
            </Border>
        </ControlTemplate>
        <ContextMenu x:Key="PageContextMenuKey" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <ContextMenu.Style>
                <Style TargetType="ContextMenu">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=HaveSelected}" Value="True">
                            <Setter Property="Template" Value="{StaticResource ResourceKey=BlockContextMenuControlTemplateKey}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ContextMenu.Style>
            <MenuItem Header="I_nsert" ItemsSource="{Binding Blocks}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Header" Value="{Binding Name}"/>
                        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, Path=DataContext.BlockInsertCommand}"/>
                        <Setter Property="CommandParameter" Value="{Binding}"/>
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <Separator/>
            <MenuItem Header="_Edit">
                <MenuItem Header="Toggle Invert Wire _Start" InputGestureText="[" Command="{Binding EditToggleInvertStartCommand}"/>
                <MenuItem Header="Toggle Invert Wire _End" InputGestureText="]" Command="{Binding EditToggleInvertEndCommand}"/>
                <Separator/>
                <MenuItem Header="Toggle _Fill" InputGestureText="F" Command="{Binding EditToggleFillCommand}"/>
                <Separator/>
                <MenuItem Header="_Increase Text Size" InputGestureText="Ctrl++" Command="{Binding EditIncreaseTextSizeCommand}"/>
                <MenuItem Header="Decrease Te_xt Size" InputGestureText="Ctrl+-" Command="{Binding EditDecreaseTextSizeCommand}"/>
                <Separator/>
                <MenuItem Header="Text A_lignment">
                    <MenuItem Header="Le_ft-Bottom" InputGestureText="Ctrl+1" Command="{Binding EditAlignLeftBottomCommand}"/>
                    <MenuItem Header="_Bottom" InputGestureText="Ctrl+2" Command="{Binding EditAlignBottomCommand}"/>
                    <MenuItem Header="Ri_ght-Bottom" InputGestureText="Ctrl+3" Command="{Binding EditAlignRightBottomCommand}"/>
                    <MenuItem Header="_Left" InputGestureText="Ctrl+4" Command="{Binding EditAlignLeftCommand}"/>
                    <MenuItem Header="Ce_nter-Center" InputGestureText="Ctrl+5" Command="{Binding EditAlignCenterCenterCommand}"/>
                    <MenuItem Header="_Right" InputGestureText="Ctrl+6" Command="{Binding EditAlignRightCommand}"/>
                    <MenuItem Header="Left-To_p" InputGestureText="Ctrl+7" Command="{Binding EditAlignLeftTopCommand}"/>
                    <MenuItem Header="_Top" InputGestureText="Ctrl+8" Command="{Binding EditAlignTopCommand}"/>
                    <MenuItem Header="Rig_ht-Top" InputGestureText="Ctrl+9" Command="{Binding EditAlignRightTopCommand}"/>
                </MenuItem>
            </MenuItem>
            <Separator/>
            <MenuItem Header="_Tool">
                <MenuItem Header="_None" InputGestureText="N" Command="{Binding ToolNoneCommand}" IsChecked="{Binding Tool.IsNoneChecked, Mode=OneWay}"/>
                <Separator/>
                <MenuItem Header="_Selection" InputGestureText="S" Command="{Binding ToolSelectionCommand}" IsChecked="{Binding Tool.IsSelectionChecked, Mode=OneWay}"/>
                <Separator/>
                <MenuItem Header="_Wire" InputGestureText="W" Command="{Binding ToolWireCommand}" IsChecked="{Binding Tool.IsWireChecked, Mode=OneWay}"/>
                <MenuItem Header="_Pin" InputGestureText="P" Command="{Binding ToolPinCommand}" IsChecked="{Binding Tool.IsPinChecked, Mode=OneWay}"/>
                <Separator/>
                <MenuItem Header="_Line" InputGestureText="L" Command="{Binding ToolLineCommand}" IsChecked="{Binding Tool.IsLineChecked, Mode=OneWay}"/>
                <MenuItem Header="_Ellipse" InputGestureText="E" Command="{Binding ToolEllipseCommand}" IsChecked="{Binding Tool.IsEllipseChecked, Mode=OneWay}"/>
                <MenuItem Header="_Rectangle" InputGestureText="R" Command="{Binding ToolRectangleCommand}" IsChecked="{Binding Tool.IsRectangleChecked, Mode=OneWay}"/>
                <MenuItem Header="_Text" InputGestureText="T" Command="{Binding ToolTextCommand}" IsChecked="{Binding Tool.IsTextChecked, Mode=OneWay}"/>
                <MenuItem Header="_Image" InputGestureText="I" Command="{Binding ToolImageCommand}" IsChecked="{Binding Tool.IsImageChecked, Mode=OneWay}"/>
            </MenuItem>
            <Separator/>
            <MenuItem Header="Te_mplate" ItemsSource="{Binding Path=Project.Templates, FallbackValue={x:Null}}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Header" Value="{Binding Name}"/>
                        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, Path=DataContext.ApplyTemplateCommand}"/>
                        <Setter Property="CommandParameter" Value="{Binding}"/>
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <Separator/>
            <MenuItem Header="Cu_t" InputGestureText="Ctrl+X" Command="{Binding EditCutCommand}"/>
            <MenuItem Header="_Copy" InputGestureText="Ctrl+C" Command="{Binding EditCopyCommand}"/>
            <MenuItem Header="_Paste" InputGestureText="Ctrl+V" Command="{Binding EditPasteCommand}"/>
            <Separator/>
            <MenuItem Header="Ca_ncel" InputGestureText="Esc" Command="{Binding EditCancelCommand}"/>
            <Separator/>
            <MenuItem Header="_Simulation">
                <MenuItem Header="_Start" InputGestureText="F5" Command="{Binding SimulationStartCommand}"/>
                <MenuItem Header="S_top" InputGestureText="F6" Command="{Binding SimulationStopCommand}"/>
                <Separator/>
                <MenuItem Header="_Restart" InputGestureText="F7" Command="{Binding SimulationRestartCommand}"/>
                <Separator/>
                <MenuItem Header="_Pause" InputGestureText="F8" Command="{Binding SimulationPauseCommand}">
                    <MenuItem.Style>
                        <Style TargetType="MenuItem">
                            <Setter Property="IsChecked" Value="False"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsSimulationPaused}" Value="True">
                                    <Setter Property="IsChecked" Value="True"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                </MenuItem>
                <MenuItem Header="Ti_ck" InputGestureText="F9" Command="{Binding SimulationTickCommand}"/>
                <Separator/>
                <MenuItem Header="_Options..." InputGestureText="" Command="{Binding SimulationOptionsCommand}"/>
            </MenuItem>
        </ContextMenu>
        <ContextMenu x:Key="BlockItemContextMenuKey" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="_Properties" InputGestureText=""/>
        </ContextMenu>
        <ContextMenu x:Key="PageItemContextMenuKey" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="Te_mplate" ItemsSource="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, Path=DataContext.Project.Templates, FallbackValue={x:Null}}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="Header" Value="{Binding Name}"/>
                        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, Path=DataContext.ApplyTemplateCommand}"/>
                        <Setter Property="CommandParameter" Value="{Binding}"/>
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <Separator/>
            <MenuItem Header="Insert Page Bef_ore" InputGestureText="" Command="{Binding DataContext.PageInsertBeforeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" CommandParameter="{Binding}"/>
            <MenuItem Header="Insert Page Aft_er" InputGestureText="" Command="{Binding DataContext.PageInsertAfterCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" CommandParameter="{Binding}"/>
            <Separator/>
            <MenuItem Header="Cu_t" InputGestureText="Ctrl+X" Command="{Binding DataContext.PageCutCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" CommandParameter="{Binding}"/>
            <MenuItem Header="_Copy" InputGestureText="Ctrl+C" Command="{Binding DataContext.PageCopyCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" CommandParameter="{Binding}"/>
            <MenuItem Header="_Paste" InputGestureText="Ctrl+V" Command="{Binding DataContext.PagePasteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" CommandParameter="{Binding}"/>
            <Separator/>
            <MenuItem Header="_Delete" InputGestureText="Del" Command="{Binding DataContext.PageDeleteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" CommandParameter="{Binding}"/>
        </ContextMenu>
        <ContextMenu x:Key="DocumentItemContextMenuKey" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="_Add Page" InputGestureText="Ctrl+N" Command="{Binding DataContext.PageAddCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" CommandParameter="{Binding}"/>
            <Separator/>
            <MenuItem Header="Insert Document Bef_ore" InputGestureText="" Command="{Binding DataContext.DocumentInsertBeforeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" CommandParameter="{Binding}"/>
            <MenuItem Header="Insert Document Aft_er" InputGestureText="" Command="{Binding DataContext.DocumentInsertAfterCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" CommandParameter="{Binding}"/>
            <Separator/>
            <MenuItem Header="Cu_t" InputGestureText="Ctrl+X" Command="{Binding DataContext.DocumentCutCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" CommandParameter="{Binding}"/>
            <MenuItem Header="_Copy" InputGestureText="Ctrl+C" Command="{Binding DataContext.DocumentCopyCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" CommandParameter="{Binding}"/>
            <MenuItem Header="_Paste" InputGestureText="Ctrl+V" Command="{Binding DataContext.DocumentPasteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" CommandParameter="{Binding}"/>
            <Separator/>
            <MenuItem Header="_Delete" InputGestureText="Del" Command="{Binding DataContext.DocumentDeleteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" CommandParameter="{Binding}"/>
        </ContextMenu>
        <ContextMenu x:Key="PojectItemContextMenuKey" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="_Add Document" InputGestureText="Ctrl+N" Command="{Binding DataContext.DocumentAddCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" CommandParameter="{Binding}"/>
        </ContextMenu>
        <ContextMenu x:Key="BlockContextMenuKey" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
            <MenuItem Header="_Delete" InputGestureText="Del" Command="{Binding DataContext.BlockDeleteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBox}}}" CommandParameter="{Binding}"/>
        </ContextMenu>
    </Window.Resources>
    <Grid FocusVisualStyle="{x:Null}">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="6"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="22"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="6"/>
            <ColumnDefinition Width="100"/>
            <ColumnDefinition Width="6"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="6"/>
            <ColumnDefinition Width="120"/>
            <ColumnDefinition Width="6"/>
        </Grid.ColumnDefinitions>
        <Menu x:Name="menu"
              Background="Transparent"
              Grid.Column="0" Grid.ColumnSpan="7" Grid.Row="0">
            <MenuItem Header="_File">
                <MenuItem Header="_New" InputGestureText="Ctrl+N" Command="{Binding FileNewCommand}"/>
                <Separator/>
                <MenuItem Header="_Open..." InputGestureText="Ctrl+O" Command="{Binding FileOpenCommand}"/>
                <MenuItem Header="_Save..." InputGestureText="Ctrl+S" Command="{Binding FileSaveCommand}"/>
                <MenuItem Header="Save _As..." InputGestureText="" Command="{Binding FileSaveAsCommand}"/>
                <Separator/>
                <MenuItem Header="Save As _PDF..." InputGestureText="Ctrl+E" Command="{Binding FileSaveAsPDFCommand}"/>
                <Separator/>
                <MenuItem Header="E_xit" InputGestureText="Alt+F4" Command="{Binding FileExitCommand}"/>
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="_Undo" InputGestureText="Ctrl+Z" Command="{Binding EditUndoCommand}"/>
                <MenuItem Header="_Redo" InputGestureText="Ctrl+Y" Command="{Binding EditRedoCommand}"/>
                <Separator/>
                <MenuItem Header="Cu_t" InputGestureText="Ctrl+X" Command="{Binding EditCutCommand}"/>
                <MenuItem Header="_Copy" InputGestureText="Ctrl+C" Command="{Binding EditCopyCommand}"/>
                <MenuItem Header="_Paste" InputGestureText="Ctrl+V" Command="{Binding EditPasteCommand}"/>
                <MenuItem Header="_Delete" InputGestureText="Del" Command="{Binding EditDeleteCommand}"/>
                <Separator/>
                <MenuItem Header="Select _All" InputGestureText="Ctrl+A" Command="{Binding EditSelectAllCommand}"/>
                <Separator/>
                <MenuItem Header="Text A_lignment">
                    <MenuItem Header="Le_ft-Bottom" InputGestureText="Ctrl+1" Command="{Binding EditAlignLeftBottomCommand}"/>
                    <MenuItem Header="_Bottom" InputGestureText="Ctrl+2" Command="{Binding EditAlignBottomCommand}"/>
                    <MenuItem Header="Ri_ght-Bottom" InputGestureText="Ctrl+3" Command="{Binding EditAlignRightBottomCommand}"/>
                    <MenuItem Header="_Left" InputGestureText="Ctrl+4" Command="{Binding EditAlignLeftCommand}"/>
                    <MenuItem Header="Ce_nter-Center" InputGestureText="Ctrl+5" Command="{Binding EditAlignCenterCenterCommand}"/>
                    <MenuItem Header="_Right" InputGestureText="Ctrl+6" Command="{Binding EditAlignRightCommand}"/>
                    <MenuItem Header="Left-To_p" InputGestureText="Ctrl+7" Command="{Binding EditAlignLeftTopCommand}"/>
                    <MenuItem Header="_Top" InputGestureText="Ctrl+8" Command="{Binding EditAlignTopCommand}"/>
                    <MenuItem Header="Rig_ht-Top" InputGestureText="Ctrl+9" Command="{Binding EditAlignRightTopCommand}"/>
                </MenuItem>
                <Separator/>
                <MenuItem Header="_Increase Text Size" InputGestureText="Ctrl++" Command="{Binding EditIncreaseTextSizeCommand}"/>
                <MenuItem Header="Decrease Te_xt Size" InputGestureText="Ctrl+-" Command="{Binding EditDecreaseTextSizeCommand}"/>
                <Separator/>
                <MenuItem Header="Toggle _Fill" InputGestureText="F" Command="{Binding EditToggleFillCommand}"/>
                <Separator/>
                <MenuItem Header="Toggle Snap to _Grid" InputGestureText="G" Command="{Binding EditToggleSnapCommand}"/>
                <Separator/>
                <MenuItem Header="Toggle Invert Wire _Start" InputGestureText="[" Command="{Binding EditToggleInvertStartCommand}"/>
                <MenuItem Header="Toggle Invert Wire _End" InputGestureText="]" Command="{Binding EditToggleInvertEndCommand}"/>
                <Separator/>
                <MenuItem Header="Toggle Shorte_n Wire" InputGestureText="H" Command="{Binding EditToggleShortenWireCommand}"/>
                <Separator/>
                <MenuItem Header="Ca_ncel" InputGestureText="Esc" Command="{Binding EditCancelCommand}"/>
            </MenuItem>
            <MenuItem Header="_Tool">
                <MenuItem Header="_None" InputGestureText="N" Command="{Binding ToolNoneCommand}" IsChecked="{Binding Tool.IsNoneChecked, Mode=OneWay}"/>
                <Separator/>
                <MenuItem Header="_Selection" InputGestureText="S" Command="{Binding ToolSelectionCommand}" IsChecked="{Binding Tool.IsSelectionChecked, Mode=OneWay}"/>
                <Separator/>
                <MenuItem Header="_Wire" InputGestureText="W" Command="{Binding ToolWireCommand}" IsChecked="{Binding Tool.IsWireChecked, Mode=OneWay}"/>
                <MenuItem Header="_Pin" InputGestureText="P" Command="{Binding ToolPinCommand}" IsChecked="{Binding Tool.IsPinChecked, Mode=OneWay}"/>
                <Separator/>
                <MenuItem Header="_Line" InputGestureText="L" Command="{Binding ToolLineCommand}" IsChecked="{Binding Tool.IsLineChecked, Mode=OneWay}"/>
                <MenuItem Header="_Ellipse" InputGestureText="E" Command="{Binding ToolEllipseCommand}" IsChecked="{Binding Tool.IsEllipseChecked, Mode=OneWay}"/>
                <MenuItem Header="_Rectangle" InputGestureText="R" Command="{Binding ToolRectangleCommand}" IsChecked="{Binding Tool.IsRectangleChecked, Mode=OneWay}"/>
                <MenuItem Header="_Text" InputGestureText="T" Command="{Binding ToolTextCommand}" IsChecked="{Binding Tool.IsTextChecked, Mode=OneWay}"/>
                <MenuItem Header="_Image" InputGestureText="I" Command="{Binding ToolImageCommand}" IsChecked="{Binding Tool.IsImageChecked, Mode=OneWay}"/>
            </MenuItem>
            <MenuItem Header="_Block">
                <MenuItem Header="I_nsert" ItemsSource="{Binding Blocks}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="MenuItem">
                            <Setter Property="Header" Value="{Binding Name}"/>
                            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, Path=DataContext.BlockInsertCommand}"/>
                            <Setter Property="CommandParameter" Value="{Binding}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <Separator/>
                <MenuItem Header="_Import..." InputGestureText="Ctrl+Shift+B" Command="{Binding BlockImportCommand}"/>
                <MenuItem Header="Import From _Code..." InputGestureText="Shift+Alt+B" Command="{Binding BlockImportCodeCommand}"/>
                <Separator/>
                <MenuItem Header="_Export..." InputGestureText="B" Command="{Binding BlockExportCommand}"/>
                <Separator/>
                <MenuItem  Header="Export _As Code..." InputGestureText="Ctrl+B" Command="{Binding BlockExportAsCodeCommand}"/>
            </MenuItem>
            <MenuItem Header="Te_mplate">
                <MenuItem Header="_Apply" ItemsSource="{Binding Path=Project.Templates, FallbackValue={x:Null}}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="MenuItem">
                            <Setter Property="Header" Value="{Binding Name}"/>
                            <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, Path=DataContext.ApplyTemplateCommand}"/>
                            <Setter Property="CommandParameter" Value="{Binding}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <Separator/>
                <MenuItem Header="_Import..." InputGestureText="Ctrl+Shift+T" Command="{Binding TemplateImportCommand}"/>
                <MenuItem Header="Import From _Code..." InputGestureText="Shift+Alt+T" Command="{Binding TemplateImportCodeCommand}"/>
                <Separator/>
                <MenuItem Header="_Export..." InputGestureText="Ctrl+T" Command="{Binding TemplateExportCommand}"/>
            </MenuItem>
            <MenuItem Header="_Simulation">
                <MenuItem Header="_Start" InputGestureText="F5" Command="{Binding SimulationStartCommand}"/>
                <MenuItem Header="S_top" InputGestureText="F6" Command="{Binding SimulationStopCommand}"/>
                <Separator/>
                <MenuItem Header="_Restart" InputGestureText="F7" Command="{Binding SimulationRestartCommand}"/>
                <Separator/>
                <MenuItem Header="_Pause" InputGestureText="F8" Command="{Binding SimulationPauseCommand}">
                    <MenuItem.Style>
                        <Style TargetType="MenuItem">
                            <Setter Property="IsChecked" Value="False"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsSimulationPaused}" Value="True">
                                    <Setter Property="IsChecked" Value="True"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                </MenuItem>
                <MenuItem Header="Ti_ck" InputGestureText="F9" Command="{Binding SimulationTickCommand}"/>
                <Separator/>
                <MenuItem Header="Create _Graph..." InputGestureText="" Command="{Binding SimulationCreateGraphCommand}"/>
                <Separator/>
                <MenuItem Header="_Import From Code..." InputGestureText="" Command="{Binding SimulationImportCodeCommand}"/>
                <Separator/>
                <MenuItem Header="_Options..." InputGestureText="" Command="{Binding SimulationOptionsCommand}"/>
            </MenuItem>
        </Menu>
        <ListBox x:Name="blocks" 
                 ItemsSource="{Binding Blocks}"
                 FocusVisualStyle="{x:Null}"
                 Background="White"
                 BorderBrush="{x:Null}"
                 BorderThickness="0,0,0,0"
                 HorizontalContentAlignment="Stretch"
                 Grid.Column="1" Grid.Row="2">
            <ListBox.InputBindings>
                <KeyBinding Command="{Binding BlockDeleteCommand}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBox}}}" Gesture="Del"/>
            </ListBox.InputBindings>
            <ListBox.ItemContainerStyle>
                <Style TargetType="ListBoxItem">
                    <Setter Property="ContextMenu" Value="{StaticResource ResourceKey=BlockContextMenuKey}"/>
                </Style>
            </ListBox.ItemContainerStyle>
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Name}" TextAlignment="Left" Padding="0,4,4,4"/>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
        <GridSplitter x:Name="left"
                      Background="Transparent" 
                      Grid.Column="2" Grid.Row="2" 
                      HorizontalAlignment="Stretch"
                      ShowsPreview="True"/>
        <native:NativeGrid x:Name="page"
                           ClipToBounds="True"
                           Grid.Column="3" Grid.Row="2" 
                           Background="White"
                           FocusVisualStyle="{x:Null}"
                           Focusable="False">
            <native:NativeZoom x:Name="zoom"
                               ClipToBounds="False"
                               Background="Transparent"
                               BorderBrush="{x:Null}" 
                               BorderThickness="0" 
                               FocusVisualStyle="{x:Null}"
                               Focusable="False"
                               VerticalAlignment="Stretch" 
                               HorizontalAlignment="Stretch"
                               Width="{Binding Path=Page.Template.Width}"
                               Height="{Binding Path=Page.Template.Height}">
                <Control x:Name="pageView" 
                         ClipToBounds="False"
                         FocusVisualStyle="{x:Null}"
                         Focusable="False"
                         Background="Transparent"
                         Template="{StaticResource PageControlTemplateKey}"
                         Width="{Binding Path=Page.Template.Width}"
                         Height="{Binding Path=Page.Template.Height}">
                    <Control.Style>
                        <Style TargetType="Control">
                            <Setter Property="ContextMenu" Value="{StaticResource ResourceKey=PageContextMenuKey}"/>
                        </Style>
                    </Control.Style>
                </Control>
            </native:NativeZoom>
        </native:NativeGrid>
        <GridSplitter x:Name="right"
                      Background="Transparent" 
                      Grid.Column="4" Grid.Row="2" 
                      HorizontalAlignment="Stretch"
                      ShowsPreview="True"/>
        <TreeView x:Name="tree" 
                  ItemsSource="{Binding Project.Documents}"
                  FocusVisualStyle="{x:Null}"
                  Background="White"
                  BorderBrush="{x:Null}"
                  BorderThickness="0,0,0,0"
                  Grid.Column="5" Grid.Row="2">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectedItemChanged">
                    <i:InvokeCommandAction Command="{Binding SelectedItemChangedCommand}" CommandParameter="{Binding ElementName=tree, Path=SelectedItem}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <TreeView.InputBindings>
                <KeyBinding Command="{Binding ProjectAddCommand}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" Gesture="Ctrl+N"/>
                <KeyBinding Command="{Binding ProjectCutCommand}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" Gesture="Ctrl+X"/>
                <KeyBinding Command="{Binding ProjectCopyCommand}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" Gesture="Ctrl+C"/>
                <KeyBinding Command="{Binding ProjectPasteCommand}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" Gesture="Ctrl+V"/>
                <KeyBinding Command="{Binding ProjectDeleteCommand}" CommandParameter="{Binding Path=SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}" Gesture="Del"/>
            </TreeView.InputBindings>
            <TreeView.Style>
                <Style TargetType="TreeView">
                    <Setter Property="ContextMenu" Value="{StaticResource PojectItemContextMenuKey}"/>
                </Style>
            </TreeView.Style>
            <TreeView.ItemContainerStyle>
                <Style TargetType="TreeViewItem">
                    <Setter Property="IsExpanded" Value="True"/>
                    <Setter Property="IsSelected" Value="{Binding IsActive}"/>
                    <Setter Property="ContextMenu" Value="{StaticResource DocumentItemContextMenuKey}"/>
                    <EventSetter Event="TreeViewItem.MouseRightButtonDown" Handler="TreeViewItem_MouseRightButtonDown"/>
                </Style>
            </TreeView.ItemContainerStyle>
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Pages}">
                    <HierarchicalDataTemplate.ItemContainerStyle>
                        <Style TargetType="TreeViewItem">
                            <Setter Property="IsExpanded" Value="False"/>
                            <Setter Property="IsSelected" Value="{Binding IsActive}"/>
                            <Setter Property="ContextMenu" Value="{StaticResource PageItemContextMenuKey}"/>
                            <EventSetter Event="TreeViewItem.MouseRightButtonDown" Handler="TreeViewItem_MouseRightButtonDown"/>
                        </Style>
                    </HierarchicalDataTemplate.ItemContainerStyle>
                    <HierarchicalDataTemplate.ItemTemplate>
                        <HierarchicalDataTemplate ItemsSource="{Binding Blocks}">
                            <HierarchicalDataTemplate.ItemContainerStyle>
                                <Style TargetType="TreeViewItem">
                                    <Setter Property="IsExpanded" Value="False"/>
                                    <Setter Property="ContextMenu" Value="{StaticResource BlockItemContextMenuKey}"/>
                                </Style>
                            </HierarchicalDataTemplate.ItemContainerStyle>
                            <HierarchicalDataTemplate.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Name}" FontWeight="Normal"/>
                                </DataTemplate>
                            </HierarchicalDataTemplate.ItemTemplate>
                            <TextBlock Text="{Binding Name}" FontWeight="Normal"/>
                        </HierarchicalDataTemplate>
                    </HierarchicalDataTemplate.ItemTemplate>
                    <TextBlock Text="{Binding Name}" FontWeight="Normal"/>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
        <StatusBar x:Name="status" Background="Transparent" Grid.Column="1" Grid.ColumnSpan="5" Grid.Row="3">
            <TextBlock Text="{Binding LastMessage}"/>
        </StatusBar>
    </Grid>
</Window>
